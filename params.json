{"name":"Git store","body":"Git Store - using Git as versioned data store in Ruby\r\n=====================================================\r\n\r\nGitStore implements a versioned data store based on the revision\r\nmanagement system [Git][1]. You can store object hierarchies as nested\r\nhashes, which will be mapped on the directory structure of a git\r\nrepository. Basically GitStore checks out the repository into a\r\nin-memory representation, which can be modified and finally committed.\r\n\r\nGitStore supports transactions, so that updates to the store either\r\nfail or succeed completely.\r\n\r\n### Installation\r\n\r\nGitStore can be installed as gem easily:\r\n\r\n    $ gem sources -a http://gems.github.com\r\n    $ sudo gem install georgi-git_store\r\n\r\n### Usage Example\r\n\r\nFirst thing you should do, is to initialize a new git repository.\r\n\r\n    $ mkdir test\r\n    $ cd test\r\n    $ git init\r\n\r\nNow you can instantiate a GitStore instance and store some data. The\r\ndata will be serialized depending on the file extension. So for YAML\r\nstorage you can use the 'yml' extension:\r\n\r\n    store = GitStore.new('/path/to/repo')\r\n\r\n    store['users/matthias.yml'] = User.new('Matthias')\r\n    store['pages/home.yml'] = Page.new('matthias', 'Home')\r\n\r\n    store.commit 'Added user and page'\r\n\r\n### Transactions\r\n\r\nGitStore manages concurrent access by a file locking scheme. So only\r\none process can start a transaction at one time. This is implemented\r\nby locking the `refs/head/<branch>.lock` file, which is also\r\nrespected by the git binary.\r\n\r\nIf you access the repository from different processes or threads, you\r\nshould write to the store using transactions. If something goes wrong\r\ninside a transaction, all changes will be rolled back to the original\r\nstate.\r\n\r\n    store = GitStore.new('/path/to/repo')\r\n\r\n    store.transaction do\r\n      # If an exception happens here, the transaction will be aborted.\r\n      store['pages/home.yml'] = Page.new('matthias', 'Home')\r\n    end\r\n\r\n\r\nA transaction without a block looks like this:\r\n\r\n    store.start_transaction\r\n \r\n    store['pages/home.yml'] = Page.new('matthias', 'Home')\r\n\r\n    store.rollback # This will restore the original state\r\n\r\n\r\n### Data Storage\r\n\r\nWhen you call the `commit` method, your data is written back straight\r\ninto the git repository. No intermediate file representation. So if\r\nyou want to have a look at your data, you can use a git browser like\r\n[git-gui][6] or checkout the files:\r\n\r\n    $ git checkout\r\n\r\n\r\n### Iteration\r\n\r\nIterating over the data objects is quite easy. Furthermore you can\r\niterate over trees and subtrees, so you can partition your data in a\r\nmeaningful way. For example you may separate the config files and the\r\npages of a wiki:\r\n\r\n    store['pages/home.yml'] = Page.new('matthias', 'Home')\r\n    store['pages/about.yml'] = Page.new('matthias', 'About')\r\n    store['config/wiki.yml'] = { 'name' => 'My Personal Wiki' }\r\n\r\n    # Enumerate all objects\r\n    store.each { |obj| ... } \r\n\r\n    # Enumerate only pages\r\n    store['pages'].each { |page| ... }\r\n\r\n\r\n### Serialization\r\n\r\nSerialization is dependent on the filename extension. You can add more\r\nhandlers if you like, the interface is like this:\r\n\r\n    class YAMLHandler\r\n      def read(data)\r\n        YAML.load(data)\r\n      end\r\n   \r\n      def write(data)\r\n        data.to_yaml\r\n      end    \r\n    end\r\n\r\nShinmun uses its own handler for files with `md` extension:\r\n\r\n    class PostHandler\r\n      def read(data)\r\n        Post.new(:src => data)\r\n      end\r\n   \r\n      def write(post)\r\n        post.dump\r\n      end    \r\n    end\r\n\r\n    store = GitStore.new('.')\r\n    store.handler['md'] = PostHandler.new\r\n\r\n\r\n### GitStore on GitHub\r\n\r\nDownload or fork the project on its [Github page][5]\r\n\r\n### Mailing List\r\n\r\nPlease join the [GitStore Google Group][3] for further discussion.\r\n\r\n### Related Work\r\n\r\nJohn Wiegley already has done [something similar for Python][4].\r\n\r\n\r\n\r\n[1]: http://git.or.cz/\r\n[2]: http://github.com/mojombo/grit\r\n[3]: http://groups.google.com/group/gitstore\r\n[4]: http://www.newartisans.com/blog_files/git.versioned.data.store.php\r\n[5]: http://github.com/georgi/git_store\r\n[6]: http://www.kernel.org/pub/software/scm/git/docs/git-gui.html\r\n[7]: http://www.matthias-georgi.de/shinmun\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Git as versioned data store in Ruby","google":""}